import { guild as guildId, channels, roles } from "../../config.js";
import { deleteAnswer, deleteVerify, getAnswer, getCategory, getVerify, setCategory, setVerify } from "./DataManager.js";
import { Message, Guild, Client, User, MessageEmbed, MessageActionRow, MessageButton, TextChannel } from "discord.js";
import questions from "./QuestionsList.js";
import { colors, regular, success } from "./Messages.js";

/**
 * @param {Guild} guild 
 */
async function createCategory(guild) {
	const category = await guild.channels.create("Verification", {
		type: "GUILD_CATEGORY",
		permissionOverwrites: [
			{
				id: guild.id,
				deny: ["VIEW_CHANNEL", "SEND_MESSAGES", "CONNECT"]
			}
		]
	});
	setCategory(category.id);

	return category;
}

/**
 * @param {Client} client 
 */
async function checkForCategory(client) {
	const guild = client.guilds.cache.get(guildId);

	const categoryId = getCategory();
	if (!categoryId) return createCategory(guild);

	try {
		const category = await guild.channels.fetch(categoryId);
		console.log("Verification category found!");
		return category;
	} catch (e) {
		console.log("Verification category not found!");
		await createCategory(guild);
	}
}


/**
 * @param {Guild} guild
 * @param {User} user - user
 * @returns {Promise<Boolean>}
 */
async function checkForChannel(guild, user) {
	const userVeryfy = getVerify(user.id);

	if (userVeryfy?.channel) {
		try {
			await guild.channels.fetch(userVeryfy.channel);
			return true;
		} catch (e) {
			return false;
		}
	}
	return false;
}


/**
 * @param {Guild} guild
 * @param {User} user
 */
async function startConversation(guild, user) {
	try {
		const member = await guild.members.fetch(user.id);
		if (member.roles.cache.has(roles.approved)) return false;
	} catch (e) {
		return false;
	}

	const chanelExists = await checkForChannel(guild, user);
	if (chanelExists) return false;

	const categoryId = getCategory();

	const channel = await guild.channels.create(user.username, {
		type: "GUILD_TEXT",
		parent: categoryId
	});

	await channel.lockPermissions();
	await channel.permissionOverwrites.edit(user, {VIEW_CHANNEL: true, SEND_MESSAGES: true});

	setVerify(user.id, {
		channel: channel.id,
		question: 0,
		onSameQuestion: 0
	});

	regular(channel, "–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", `–í–∞–º –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞. –ù—É —á—Ç–æ –∂–µ, –Ω–∞—á–Ω–µ–º! \n\n**${questions[0].message}**`, {imgae: questions[0].image, content: user.toString()});

	return true;
}

/**
 * @param {Guild} guild
 * @param {User} user
 */
async function endConversation(guild, user) {
	const userVeryfy = getVerify(user.id);

	const chanelExists = await checkForChannel(guild, user);
	if (chanelExists) {
		await guild.channels.delete(userVeryfy.channel);
	}

	deleteAnswer(user.id);
	deleteVerify(user.id);

	if (!userVeryfy?.alertMessage) return true; // –ù—É —á–µ–ª —Ç–∏–ø –¥–∞–∂–µ –Ω–µ –¥–æ—à–µ–ª –¥–æ –≤–µ—Ä–µ—Ñ–∏–∫–∞—Ü–∏–∏.

	/** @type {TextChannel} */
	const answerChannel = await guild.channels.fetch(channels.answers);

	try {
		const alertMessage = await answerChannel.messages.fetch(userVeryfy.alertMessage);
		await alertMessage.delete();
	} catch (e) {}

	return true;
}

/**
 * @param {Message} message
 */
async function sendForConfirmation(message) {
	const userVeryfy = getVerify(message.author.id);

	/** @type {TextChannel} */
	const verifyChannel = await message.guild.channels.fetch(userVeryfy.channel);

	await verifyChannel.edit({name: `üü¢${userVeryfy.nickname}`})
	await verifyChannel.permissionOverwrites.edit(roles.moderator, {VIEW_CHANNEL: true, SEND_MESSAGES: true});

	/** @type {TextChannel} */
	const answerChannel = await message.guild.channels.fetch(channels.answers);

	const alertMessage = await answerChannel.send({
		content: `<@&${roles.moderator}>`,
		embeds: [
			new MessageEmbed({
				color: colors.regular,
				title: "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
				description: "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –±–µ—Å–µ–¥—ã —Å –Ω–∏–º!",
				fields: [
					{
						name: "–ö–∞–Ω–∞–ª",
						value: `<#${userVeryfy.channel}>`
					},
					{
						name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
						value: `<@${message.author.id}>`,
						inline: true
					},
					{
						name: "–ù–∏–∫ –≤ Minecraft",
						value: `\`${userVeryfy.nickname}\``,
						inline: true
					},
					{
						name: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
						value: message.author.createdAt.toLocaleString("ru")
					},
					{
						name: "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
						value: message.member.joinedAt.toLocaleString("ru")
					}
				],
				footer: {
					text: "‚ö† –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –±–µ—Å–µ–¥—ã –≤–≤–µ–¥–∏—Ç–µ /approve –∏–ª–∏ /reject —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!!"
				}
			})
		],
		files: [
			{
				name: "–û—Ç–≤–µ—Ç—ã.txt",
				attachment: getAnswer(message.author.id)
			}
		],
		components: [
			new MessageActionRow({
				components: [
					new MessageButton({
						customId: "reject"+message.author.id,
						label: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É",
						style: "DANGER",
						emoji: "‚úñ"
					})
				]
			}),
		]
	})

	deleteAnswer(message.author.id);
	userVeryfy.alertMessage = alertMessage.id;
	userVeryfy.onConfirmation = true;

	await success(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–æ—à–ª–∏ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", "–¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!");

	return true;
}


export {checkForCategory, startConversation, sendForConfirmation, endConversation};