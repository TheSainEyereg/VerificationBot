const { Message, Guild, Channel, User, EmbedBuilder, ActionRowBuilder, ButtonBuilder, TextChannel, ButtonStyle, ChannelType, PermissionFlagsBits } = require("discord.js");
const { guildId, channels, roles } = require("../config");
const { deleteAnswers, deleteVerify, getAnswers, getCategories, getVerify, addCategory, createVerify, deleteCategory, updateVerify } = require("./dataManager");
const { textQuestions, quizQuestions } = require("./questionsList");
const { colors, regular, success, warning } = require("./messages");
const { States } = require("./enums");

/**
 * @param {Guild} guild 
 */
async function createCategory(guild) {
	const category = await guild.channels.create({
		name: "Verification",
		type: ChannelType.GuildCategory,
		permissionOverwrites: [
			{
				id: guild.id,
				deny: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.Connect]
			}
		]
	});
	addCategory(category.id);

	return category;
}

/**
 * @param {Guild} guild 
 */
async function getCategory(guild) {
	const categoryIds = getCategories();
	if (!categoryIds.length) return createCategory(guild);

	const categories = (await guild.channels.fetch()).filter(c => c.type === ChannelType.GuildCategory);

	for (const categoryId of categoryIds) {
		const category = categories.find(c => c.id === categoryId);
		if (!category) {
			deleteCategory(categoryId);
			continue;
		}

		if (category.children.cache.size < 50) {
			return category;
		}
	}

	if (categoryIds.length > 2) return false;
	return createCategory(guild);
}


/**
 * @param {Guild} guild
 * @param {String} id - Channel ID
 * @returns {Promise<Boolean>}
 */
async function checkForChannel(guild, id) {
	if (id) {
		try {
			await guild.channels.fetch(id);
			return true;
		} catch (e) {
			return false;
		}
	}
	return false;
}

/**
 * 
 * @param {Channel} channel 
 * @param {number} index 
 */
async function sendQuestion(channel, index) {
	if (index < textQuestions.length) {
		const question = textQuestions[index];
		await regular(
			channel,
			index === 0 ? "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å" : index === textQuestions.length-1 ? "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å" : "–í–æ–ø—Ä–æ—Å " + (index+1),
			question.message,
			{image: question.image}
		);
	} else {

	}
}


/**
 * @param {Guild} guild
 * @param {User} user
 */
async function startConversation(guild, user) {
	try {
		const member = await guild.members.fetch(user.id);
		if (member.roles.cache.has(roles.approved)) return;
	} catch (e) {
		return;
	}

	const userVerify = getVerify(user.id);

	if (userVerify) {
		const chanelExists = await checkForChannel(guild, userVerify.channelId);
		if (chanelExists) return;
	}

	const category = await getCategory(guild);

	if (!category) {
		try {
			const DMChannel = await member.user.createDM();
			if (DMChannel) await warning(DMChannel, "–û –Ω–µ—Ç!", "–°–µ–π—á–∞—Å —É –Ω–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
		} catch (e) {}
		return;
	}

	const channel = await guild.channels.create({
		name: !userVerify?.nickname ? user.username : userVerify.nickname,
		type: ChannelType.GuildText,
		parent: category.id
	});

	await channel.lockPermissions();
	await channel.permissionOverwrites.edit(user, {ViewChannel: true, SendMessages: true});

	if (!userVerify) {
		createVerify(user.id, channel.id, Date.now() + 48 * 60 * 60 * 1000 ,Object.keys(quizQuestions).sort(() => Math.random() - 0.5).join(","));
		await regular(channel, "–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", "–í–∞–º –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤! –ù—É —á—Ç–æ –∂–µ, –Ω–∞—á–Ω–µ–º!", {content: user.toString()});
		await sendQuestion(channel, 0);
	} else {
		updateVerify(user.id, "channelId", channel.id);
		const rt = Date.now() - userVerify.closeIn;
		await regular(channel, "–£–ø—Å!", `–ö–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –∫–∞–Ω–∞–ª —Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–æ–π –ø—Ä–æ–ø–∞–ª, –Ω–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å! –£—á—Ç–∏—Ç–µ, —á—Ç–æ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å ${Math.floor(rt / (1000 * 60 * 60) % 24)}—á ${Math.floor(rt / (1000 * 60) % 60)}–º.`, {content: user.toString()});
		await sendQuestion(channel, userVerify.question);
	}

}

/**
 * @param {Guild} guild
 * @param {User} user
 */
async function endConversation(guild, user) {
	const userVerify = getVerify(user.id);
	if (!userVerify) return;

	const chanelExists = await checkForChannel(guild, userVerify.channelId);
	if (chanelExists) {
		await guild.channels.delete(userVerify.channelId);
	}

	deleteVerify(user.id);

	if (!userVerify?.alertMessage) return; // –ù—É —á–µ–ª —Ç–∏–ø –¥–∞–∂–µ –Ω–µ –¥–æ—à–µ–ª –¥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.

	/** @type {TextChannel} */
	const answerChannel = await guild.channels.fetch(channels.answers);

	try {
		const alertMessage = await answerChannel.messages.fetch(userVerify.messageId);
		await alertMessage.delete();
	} catch (e) {}
}

/**
 * @param {Message} message
 */
async function sendForConfirmation(message) {
	const userVerify = getVerify(message.author.id);

	/** @type {TextChannel} */
	const verifyChannel = await message.guild.channels.fetch(userVerify.channelId);

	await verifyChannel.edit({name: `üü¢${userVerify.nickname}`})
	await verifyChannel.permissionOverwrites.edit(roles.moderator, {ViewChannel: true, SendMessages: true});

	/** @type {TextChannel} */
	const answerChannel = await message.guild.channels.fetch(channels.answers);

	const alertMessage = await answerChannel.send({
		content: `<@&${roles.moderator}>`,
		embeds: [
			new EmbedBuilder({
				color: colors.regular,
				title: "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
				description: "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –±–µ—Å–µ–¥—ã —Å –Ω–∏–º!",
				fields: [
					{
						name: "–ö–∞–Ω–∞–ª",
						value: `<#${userVerify.channelId}>`
					},
					{
						name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
						value: `<@${message.author.id}>`,
						inline: true
					},
					{
						name: "–ù–∏–∫ –≤ Minecraft",
						value: `\`${userVerify.nickname}\``,
						inline: true
					},
					{
						name: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
						value: message.author.createdAt.toLocaleString("ru")
					},
					{
						name: "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
						value: message.member.joinedAt.toLocaleString("ru")
					}
				],
				footer: {
					text: "‚ö† –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –±–µ—Å–µ–¥—ã –≤–≤–µ–¥–∏—Ç–µ /approve –∏–ª–∏ /reject —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!!"
				}
			})
		],
		files: [
			{
				name: "–û—Ç–≤–µ—Ç—ã.txt",
				attachment: getAnswer(message.author.id)
			}
		],
		components: [
			new ActionRowBuilder({
				components: [
					new ButtonBuilder({
						customId: "reject"+message.author.id,
						label: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É",
						style: ButtonStyle.Danger,
						emoji: "‚úñ"
					})
				]
			}),
		]
	})

	deleteAnswers(message.author.id);

	updateVerify(message.author.id, "messageId", alertMessage.id);
	updateVerify(message.author.id, "state", States.OnQuiz);

	await success(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–æ—à–ª–∏ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", "–¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!");

	return true;
}


module.exports = {sendQuestion, startConversation, sendForConfirmation, endConversation};