const {
	Interaction,
	Message,
	Guild,
	GuildTextBasedChannel,
	User,
	EmbedBuilder,
	ActionRowBuilder,
	ButtonBuilder,
	ButtonStyle,
	ChannelType,
	PermissionFlagsBits,
} = require("discord.js");
const { channels, roles } = require("../config");
const {
	deleteVerify,
	getAnswers,
	getCategories,
	getVerify,
	addCategory,
	createVerify,
	deleteCategory,
	updateVerify,
	getUser,
} = require("./dataManager");
const { regular, success, warning } = require("./messages");
const { States, Colors } = require("./constants");
const questions = require("./questions");

/**
 * @param {Guild} guild
 */
async function createCategory(guild) {
	const category = await guild.channels.create({
		name: "Verification",
		type: ChannelType.GuildCategory,
		permissionOverwrites: [
			{
				id: guild.id,
				deny: [
					PermissionFlagsBits.ViewChannel,
					PermissionFlagsBits.SendMessages,
					PermissionFlagsBits.Connect,
				],
			},
		],
	});
	addCategory(category.id);

	return category;
}

/**
 * @param {Guild} guild
 */
async function getCategory(guild) {
	const categoryIds = getCategories();
	if (!categoryIds.length) return createCategory(guild);

	const categories = (await guild.channels.fetch()).filter(
		c => c.type === ChannelType.GuildCategory
	);

	for (const categoryId of categoryIds) {
		const category = categories.find(c => c.id === categoryId);
		if (!category) {
			deleteCategory(categoryId);
			continue;
		}

		if (category.children.cache.size < 50) {
			return category;
		}
	}

	if (categoryIds.length > 2) return false;
	return createCategory(guild);
}

/**
 * @param {Guild} guild
 * @param {String} id - Channel ID
 * @returns {Promise<GuildTextBasedChannel | null>}
 */
async function checkForChannel(guild, id) {
	return id ? await guild.channels.fetch(id).catch(() => null) : null;
}

/**
 *
 * @param {GuildTextBasedChannel} channel
 * @param {Object} verify
 */
async function sendQuestion(channel, verify) {
	if (verify.state === States.OnAnswers) {
		const question = questions[verify.question];

		const embed = regular(
			null,
			verify.question === 0
				? "–ù–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
				: verify.question === questions.length - 1
					? `–í–æ–ø—Ä–æ—Å ${verify.question + 1} - –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å`
					: `–í–æ–ø—Ä–æ—Å ${verify.question + 1}`,
			question.message,
			{ image: question.image, embed: true }
		)
	
		if (question.type === "text") {
			embed.setFooter({ text: "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º." });
			await channel.send({
				embeds: [ embed ],
			});
		}
	
		if (question.type === "quiz") {
			const answerOrder = Object.keys(question.answers)
			// 	.sort(() => Math.random() - 0.5);
	
			const components = answerOrder.map((answer, i) => {
				const answerEntry = question.answers[Number(answer)];
				
				const answerText = typeof answerEntry === "string" ? answerEntry : answerEntry.text;
				const style = typeof answerEntry === "string" ? ButtonStyle.Primary : answerEntry.style || ButtonStyle.Primary;

				return new ButtonBuilder({
					custom_id: `answer${i}`,
					label: answerText.length > 80 ? answerText.slice(0, 77) + "..." : answerText,
					style
				});
			});

			updateVerify(verify.userId, "answerOrder", answerOrder.join(","));
	
			await channel.send({
				embeds: [ embed ],
				components: [new ActionRowBuilder({ components })],
			});
		}
	}

	if (verify.state === States.OnPassword) {
		await channel.send({
			embeds: [
				warning(
					null,
					"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è",
					"–î–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/changepassword <—Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å> <–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å>`.",
					{ embed: true }
				),
			],
			components: [
				new ActionRowBuilder({
					components: [
						new ButtonBuilder({
							customId: "requestPassword",
							label: "–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å",
							style: ButtonStyle.Primary,
						}),
					],
				}),
			],
		});
	}
}

/**
 * @param {Guild} guild
 * @param {User} user
 */
async function startConversation(guild, user) {
	try {
		const member = await guild.members.fetch(user.id);
		if (member.roles.cache.has(roles.approved)) return;

		const possibleUser = getUser(user.id);
		if (possibleUser) return await member.roles.add(roles.approved);
	} catch (e) {
		return;
	}

	const userVerify = getVerify(user.id);

	if (userVerify) {
		const channelExists = await checkForChannel(
			guild,
			userVerify.channelId
		);
		if (channelExists) return;
	}

	const category = await getCategory(guild);

	if (!category) {
		try {
			await warning(
				user,
				"–û –Ω–µ—Ç!",
				"–°–µ–π—á–∞—Å —É –Ω–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
			);
		} catch (e) {}
		return;
	}

	const channel = await guild.channels.create({
		name: userVerify?.nickname || user.username,
		type: ChannelType.GuildText,
		parent: category.id,
	});

	await channel.lockPermissions();
	await channel.permissionOverwrites.edit(user, {
		ViewChannel: true,
		SendMessages: true,
	});

	if (!userVerify) {
		createVerify(user.id, channel.id, Date.now() + 48 * 60 * 60e3);
		await regular(
			channel,
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
			"–ú—ã –Ω–∞—á–Ω–µ–º —Å –∞–Ω–∫–µ—Ç—ã, –≥–¥–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!",
			{ content: user.toString() }
		);
		await sendQuestion(channel, { question: 0, state: States.OnAnswers });
		return;
	}

	updateVerify(user.id, "channelId", (userVerify.channelId = channel.id));

	if (userVerify.state === States.OnConfirmation) {
		await success(
			channel,
			"–í—Å–µ –≥–æ—Ç–æ–≤–æ!",
			"–ö–∞–Ω–∞–ª —Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–æ–π –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ.",
			{ content: user.toString() }
		);
		return;
	}

	await regular(
		channel,
		"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è!",
		`–í–∞—à –∫–∞–Ω–∞–ª –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å ${Math.floor(
			(userVerify.openUntil - Date.now()) / (1000 * 60 * 60)
		)}—á ${Math.floor(
			((userVerify.openUntil - Date.now()) / (1000 * 60)) % 60
		)}–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.`,
		{ content: user.toString() }
	);
	await sendQuestion(channel, userVerify);
}

/**
 * @param {Guild} guild
 * @param {User} user
 */
async function endConversation(guild, user) {
	const userVerify = getVerify(user.id);
	if (!userVerify) return;

	deleteVerify(user.id);

	const channel = await checkForChannel(guild, userVerify.channelId);
	if (channel)
		await channel.delete();

	if (!userVerify?.messageId) return;

	/** @type {GuildTextBasedChannel} */
	const answerChannel = await guild.channels.fetch(channels.answers);

	try {
		const alertMessage = await answerChannel.messages.fetch(
			userVerify.messageId
		);
		await alertMessage.delete();
	} catch (e) {}
}

/**
 * @param {Interaction} interaction
 */
async function askForPassword(interaction) {
	const userVerify = getVerify(interaction.user.id);

	/** @type {GuildTextBasedChannel} */
	const verifyChannel = await interaction.guild.channels.fetch(
		userVerify.channelId
	);
	updateVerify(
		interaction.user.id,
		"state",
		(userVerify.state = States.OnPassword)
	);

	await regular(
		verifyChannel,
		"–ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —à–∞–≥!",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ–Ω —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º.",
		{ content: interaction.user.toString() }
	);
	await sendQuestion(verifyChannel, userVerify);
}

/**
 * @param {Interaction | Message} interaction
 */
async function sendForConfirmation(interaction) {
	const userVerify = getVerify(interaction.user.id);

	/** @type {GuildTextBasedChannel} */
	const verifyChannel = await interaction.guild.channels.fetch(
		userVerify.channelId
	);

	await verifyChannel.edit({ name: `üü¢${userVerify.nickname}` });
	await verifyChannel.permissionOverwrites.edit(roles.inspector, {
		ViewChannel: true,
		SendMessages: true,
	});

	/** @type {GuildTextBasedChannel} */
	const answerChannel = await interaction.guild.channels.fetch(
		channels.answers
	);

	const alertMessage = await answerChannel.send({
		content: `<@&${roles.inspector}>`,
		embeds: [
			new EmbedBuilder({
				color: Colors.Regular,
				title: "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
				description:
					"–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –±–µ—Å–µ–¥—ã —Å –Ω–∏–º!",
				fields: [
					{
						name: "–ö–∞–Ω–∞–ª",
						value: `<#${userVerify.channelId}>`,
					},
					{
						name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
						value: `<@${interaction.user.id}>`,
						inline: true,
					},
					{
						name: "–ù–∏–∫ –≤ Minecraft",
						value: `\`${userVerify.nickname}\``,
						inline: true,
					},
					{
						name: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
						value: `<t:${Math.floor(
							interaction.user.createdAt / 1000
						)}>`,
					},
					{
						name: "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
						value: `<t:${Math.floor(
							interaction.member.joinedAt / 1000
						)}>`,
					},
				],
				footer: {
					text: "‚ö† –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –±–µ—Å–µ–¥—ã –≤–≤–µ–¥–∏—Ç–µ /approve –∏–ª–∏ /reject —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!!",
				},
			}),
		],
		files: [
			{
				name: "answers.txt",
				attachment: Buffer.from(
					getAnswers(interaction.user.id)
						.map(qa => `–í–æ–ø—Ä–æ—Å: ${qa.q}\n–û—Ç–≤–µ—Ç: ${qa.a}\n\n`)
						.join("")
				),
			},
		],
		components: [
			new ActionRowBuilder({
				components: [
					new ButtonBuilder({
						customId: "reject" + interaction.user.id,
						label: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É",
						style: ButtonStyle.Danger,
						emoji: "‚úñ",
					}),
				],
			}),
		],
	});

	updateVerify(interaction.user.id, "messageId", alertMessage.id);
	updateVerify(interaction.user.id, "state", States.OnConfirmation);

	await success(
		interaction.channel,
		"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–æ—à–ª–∏ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
		"–¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –ò –¥–∞, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤–∞—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç :)"
	);
}

module.exports = {
	checkForChannel,
	sendQuestion,
	startConversation,
	askForPassword,
	sendForConfirmation,
	endConversation
};
