const { Message, Interaction, Guild, Channel, User, EmbedBuilder, ActionRowBuilder, ButtonBuilder, TextChannel, ButtonStyle, ChannelType, PermissionFlagsBits } = require("discord.js");
const { channels, roles } = require("../config");
const { deleteVerify, getAnswers, getCategories, getVerify, addCategory, createVerify, deleteCategory, updateVerify, getUser } = require("./dataManager");
const { textQuestions, quizQuestions } = require("./questionsList");
const { regular, success, warning } = require("./messages");
const { States, Colors } = require("./constants");

/**
 * @param {Guild} guild 
 */
async function createCategory(guild) {
	const category = await guild.channels.create({
		name: "Verification",
		type: ChannelType.GuildCategory,
		permissionOverwrites: [
			{
				id: guild.id,
				deny: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.Connect]
			}
		]
	});
	addCategory(category.id);

	return category;
}

/**
 * @param {Guild} guild 
 */
async function getCategory(guild) {
	const categoryIds = getCategories();
	if (!categoryIds.length) return createCategory(guild);

	const categories = (await guild.channels.fetch()).filter(c => c.type === ChannelType.GuildCategory);

	for (const categoryId of categoryIds) {
		const category = categories.find(c => c.id === categoryId);
		if (!category) {
			deleteCategory(categoryId);
			continue;
		}

		if (category.children.cache.size < 50) {
			return category;
		}
	}

	if (categoryIds.length > 2) return false;
	return createCategory(guild);
}


/**
 * @param {Guild} guild
 * @param {String} id - Channel ID
 * @returns {Promise<Boolean>}
 */
async function checkForChannel(guild, id) {
	if (id) {
		try {
			await guild.channels.fetch(id);
			return true;
		} catch (e) {
			return false;
		}
	}
	return false;
}

/**
 * 
 * @param {Channel} channel 
 * @param {Object} verify 
 */
async function sendQuestion(channel, verify) {
	if (verify.state === States.OnText) {
		const question = textQuestions[verify.question];
		await regular(
			channel,
			`–í–æ–ø—Ä–æ—Å ${(verify.question+1)}`,
			question.message,
			{image: question.image}
		);
	}

	if (verify.state === States.OnQuiz) {
		const quizOrder = verify.quizOrder.split(",");

		const question = quizQuestions[quizOrder[verify.question]];

		const answerOrder = Object.keys(question.answers).sort(() => Math.random() - 0.5);

		const components = [];
		for (const [i, answer] of answerOrder.entries()) {
			const answerText = question.answers[answer];

			components.push(new ButtonBuilder({
				custom_id: "answer"+i,
				label: answerText,
				style: ButtonStyle.Primary
			}))
		}

		await channel.send({
			embeds: [ 
				regular(
					null,
					verify.question === quizQuestions.length-1 ? "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å" : `–í–æ–ø—Ä–æ—Å ${(verify.question + textQuestions.length + 1)}`,
					question.message,
					{image: question.image, embed: true}
				)
			],
			components: [ new ActionRowBuilder({components}) ]
		})

		updateVerify(verify.userId, "quizAnswerOrder", answerOrder.join(","));
	}

	if (verify.state === States.OnPassword) {
		await channel.send({
			embeds: [
				warning(
					null,
					"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è",
					"–í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±–µ–∑–æ–ø–∞—Å–∏—Ç—å –≤–∞—à –±—É–¥—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –≤–∞—Å –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∫—Ç–æ —É–≥–æ–¥–Ω–æ –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–π—Ç–∏ –ø–æ–¥ –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º.\n\n–ü–∞—Ä–æ–ª—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/changepassword <—Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å> <–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å>`",
					{embed: true}
				)
			],
			components: [
				new ActionRowBuilder({
					components: [
						new ButtonBuilder({
							customId: "requestPassword",
							label: "–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å",
							style: ButtonStyle.Primary
						})
					]
				})
			]
		})
	}
}


/**
 * @param {Guild} guild
 * @param {User} user
 */
async function startConversation(guild, user) {
	try {
		const member = await guild.members.fetch(user.id);
		if (member.roles.cache.has(roles.approved)) return;
	
		const possibleUser = getUser(user.id);
		if (possibleUser) return await member.roles.add(roles.approved);
	} catch (e) {
		return;
	}

	const userVerify = getVerify(user.id);

	if (userVerify) {
		const chanelExists = await checkForChannel(guild, userVerify.channelId);
		if (chanelExists) return;
	}

	const category = await getCategory(guild);

	if (!category) {
		try {
			const DMChannel = await user.createDM();
			if (DMChannel) await warning(DMChannel, "–û –Ω–µ—Ç!", "–°–µ–π—á–∞—Å —É –Ω–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
		} catch (e) {}
		return;
	}

	const channel = await guild.channels.create({
		name: !userVerify?.nickname ? user.username : userVerify.state !== States.OnConfirmation ? userVerify.nickname : `üü¢${userVerify.nickname}`,
		type: ChannelType.GuildText,
		parent: category.id
	});

	await channel.lockPermissions();
	await channel.permissionOverwrites.edit(user, {ViewChannel: true, SendMessages: true});

	if (!userVerify) {
		createVerify(user.id, channel.id, Date.now() + 48 * 60 * 60e3 ,Object.keys(quizQuestions).sort(() => Math.random() - 0.5).join(","));
		await regular(channel, "–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", "–í–∞–º –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤! –ù—É —á—Ç–æ –∂–µ, –Ω–∞—á–Ω–µ–º!", {content: user.toString()});
		await sendQuestion(channel, {question: 0, state: States.OnText});
		return;
	}

	updateVerify(user.id, "channelId", userVerify.channelId = channel.id);

	if (userVerify.state === States.OnConfirmation) {
		await success(channel, "–í—Å–µ –≥–æ—Ç–æ–≤–æ!", "–û–¥–Ω–∞–∫–æ –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –∫–∞–Ω–∞–ª —Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–æ–π –ø—Ä–æ–ø–∞–ª, –Ω–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –≤—ã —É–∂–µ –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ –∏ –≤–∞–º –ª–∏—à—å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤–∞–º –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—Å. \n\n–ö–∞–Ω–∞–ª –±—ã–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –≤–∞–º.", {content: user.toString()});
		return;
	}

	const rt = userVerify.openUntil - Date.now();
	await regular(channel, "–£–ø—Å!", `–ö–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –∫–∞–Ω–∞–ª —Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–æ–π –ø—Ä–æ–ø–∞–ª, –Ω–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å! –£—á—Ç–∏—Ç–µ, —á—Ç–æ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å ${Math.floor(rt / (1000 * 60 * 60))}—á ${Math.floor(rt / (1000 * 60) % 60)}–º.`, {content: user.toString()});
	await sendQuestion(channel, userVerify);
}

/**
 * @param {Guild} guild
 * @param {User} user
 */
async function endConversation(guild, user) {
	const userVerify = getVerify(user.id);
	if (!userVerify) return;

	deleteVerify(user.id);

	const chanelExists = await checkForChannel(guild, userVerify.channelId);
	if (chanelExists) await guild.channels.delete(userVerify.channelId);


	if (!userVerify?.messageId) return; // –ù—É —á–µ–ª —Ç–∏–ø –¥–∞–∂–µ –Ω–µ –¥–æ—à–µ–ª –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

	/** @type {TextChannel} */
	const answerChannel = await guild.channels.fetch(channels.answers);

	try {
		const alertMessage = await answerChannel.messages.fetch(userVerify.messageId);
		await alertMessage.delete();
	} catch (e) {}
}


/**
 * @param {Message} message
 */
async function sendForQuiz(message) {
	const userVerify = getVerify(message.author.id);
	
	/** @type {TextChannel} */
	const verifyChannel = await message.guild.channels.fetch(userVerify.channelId);

	updateVerify(message.author.id, "state", userVerify.state = States.OnQuiz);
	updateVerify(message.author.id, "question",  userVerify.question = 0);
	
	// await regular(verifyChannel, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –ø–æ–∑–∞–¥–∏!", "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ç–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç–∏–∫! –ü–æ–µ—Ö–∞–ª–∏!")
	await sendQuestion(verifyChannel, userVerify);
}

/**
 * 
 * @param {Interaction} interaction 
 */
async function askForPassword(interaction) {
	const userVerify = getVerify(interaction.user.id);
	
	/** @type {TextChannel} */
	const verifyChannel = await interaction.guild.channels.fetch(userVerify.channelId);
	updateVerify(interaction.user.id, "state", userVerify.state = States.OnPassword);
		
	await regular(verifyChannel, "–í–æ—Ç –∏ –≥–æ—Ç–æ–≤–æ!", "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç, –æ–¥–Ω–∞–∫–æ –µ—Å—Ç—å –µ—â—ë –æ–¥–Ω–∞ –≤–∞–∂–Ω–∞—è –≤–µ—â—å! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ whitelist, –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–æ—à–µ–ª –∫—Ç–æ-–ª–∏–±–æ –≤–∞–º –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –≤–∞—à–µ–º—É –Ω–∏–∫-–Ω–µ–π–º—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!");
	await sendQuestion(verifyChannel, userVerify);
}

/**
 * @param {Interaction} interaction
 */
async function sendForConfirmation(interaction) {
	const userVerify = getVerify(interaction.user.id);

	/** @type {TextChannel} */
	const verifyChannel = await interaction.guild.channels.fetch(userVerify.channelId);

	await verifyChannel.edit({name: `üü¢${userVerify.nickname}`})
	await verifyChannel.permissionOverwrites.edit(roles.inspector, {ViewChannel: true, SendMessages: true});

	/** @type {TextChannel} */
	const answerChannel = await interaction.guild.channels.fetch(channels.answers);

	const alertMessage = await answerChannel.send({
		content: `<@&${roles.inspector}>`,
		embeds: [
			new EmbedBuilder({
				color: Colors.Regular,
				title: "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
				description: "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –±–µ—Å–µ–¥—ã —Å –Ω–∏–º!",
				fields: [
					{
						name: "–ö–∞–Ω–∞–ª",
						value: `<#${userVerify.channelId}>`
					},
					{
						name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
						value: `<@${interaction.user.id}>`,
						inline: true
					},
					{
						name: "–ù–∏–∫ –≤ Minecraft",
						value: `\`${userVerify.nickname}\``,
						inline: true
					},
					{
						name: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
						value: `<t:${Math.floor(interaction.user.createdAt / 1000)}>`,
					},
					{
						name: "–î–∞—Ç–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
						value: `<t:${Math.floor(interaction.member.joinedAt / 1000)}>`,
					}
				],
				footer: {
					text: "‚ö† –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –±–µ—Å–µ–¥—ã –≤–≤–µ–¥–∏—Ç–µ /approve –∏–ª–∏ /reject —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!!"
				}
			})
		],
		files: [
			{
				name: "answers.txt",
				attachment: Buffer.from(getAnswers(interaction.user.id).map(qa => `–í–æ–ø—Ä–æ—Å: ${qa.q}\n–û—Ç–≤–µ—Ç: ${qa.a}\n\n`).join(""))
			}
		],
		components: [
			new ActionRowBuilder({
				components: [
					new ButtonBuilder({
						customId: "reject"+interaction.user.id,
						label: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å—Ä–∞–∑—É",
						style: ButtonStyle.Danger,
						emoji: "‚úñ"
					})
				]
			}),
		]
	});

	updateVerify(interaction.user.id, "messageId", alertMessage.id);
	updateVerify(interaction.user.id, "state", States.OnConfirmation);

	await success(interaction.channel, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–æ—à–ª–∏ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", "–¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –ò –¥–∞, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤–∞—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç :)");
}


module.exports = {checkForChannel, sendQuestion, startConversation, sendForQuiz, askForPassword, sendForConfirmation, endConversation};